[/
    Copyright 2015 Anurag Ghosh.
    Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
/]

[section:introduction Motivation]

[warning This is not an official Boost C++ library. It wasn't reviewed and can't be downloaded from www.boost.org. This beta is available to boost community to know real interest and get comments for refinement. The intention is to submit the library to a formal review and get included as an official library, if community think that it is interesting!]

Boost.Document library is meant to simplify tasks related to manipulation of Office Documents in general and Spreadsheet Documents in particular. All the Current Office API's, be it LibreOffice/OpenOffice or MS Excel are not intuitive to use at all and the effort to write applications which use such API's distracts the developer from performing the core problems at hand. The idea here is to provide a simple, cross-platform and usable interface for developers to use to make their own applications which involve manipulating Excel/OpenOffice/LibreOffice sheets. Such a library will have many takers such as Students/Professors in academia, Banking/CRM softwares etc.

[endsect]

[section:introduction How to Set up?]

The document library facilitates the usage of the Document Automation API of Microsoft and/or the API's of Libreoffice in a very easy to use and intuitive manner. However, some amount of work needs to be done before the library can be compiled using Boost.Build and used.

[section Using Microsoft Office]

You would need to install Microsoft Office 2003 or above as certain features are not available in Office'97. Also, Visual Studio would be recommended as the Library has been tested to compile using Visual Studio on Windows and uses the Visual Studio included header files.
If these prerequisities are satisfied, one needs to open a shell at `boost_document_lib\build` and run '..\\..\\..\\b2' to compile the library. This shall work only on Windows and not on Linux.

[endsect]

[section Using Libre Office]

You would need to atleast install Libre Office 4 and the Libre Office SDK at least with the default folder configuration. Expected folder path of Libreoffice is `C:\Program Files (x86)\LibreOffice 4\` on Windows and `/usr/lib/libreoffice/` on Linux.

[section On Linux]

# Install SDK using variant of the following command `sudo apt-get install libreoffice-dev`.

# On the terminal, Go to `/usr/lib/libreoffice/sdk`.

# Set the appropriate environment variables using `source setsdkenv_unix.sh`

# Change directory to the appropriate SDK Directory in your home folder.

# Run the following command to generate the includes, Add `-BUCR` after `-Gc` if necessary. `cppumaker -Gc -O"$OO_SDK_OUT/include/" /usr/lib/ure/share/misc/types.rdb /usr/lib/libreoffice/program/types/offapi.rdb /usr/lib/libreoffice/program/types/oovbaapi.rdb`

# Change directory to your boost directory which you downloaded from sourceforge. Go to `libs/` folder.

# Clone the library from github as document. `git clone https://github.com/anuragxel/boost-document.git document`

# Change directory to the `build/` dicrectory.

# Run `../../../b2` to compile the library. You may need to run `bootstrap.sh` in the `boost/` directory first to generate `b2`.

[endsect]

[section On Windows]

# Install both LibreOffice 4.4 and LibreOffice 4.4 SDK by downloading them from the official website.

# Open Your Command Prompt, go to C:\Program Files (x86)\LibreOffice 4\sdk and run setsdkenv_windows.bat and provide the necessary paths. Install cat, sed, zip.

# Add  `C:\Program Files (x86)\LibreOffice 4\URE\bin` to the system PATH.

# Go to `C:\Program Files (x86)\LibreOffice 4\sdk\bin` and run the following command to generate the includes,
   `cppumaker.exe -Gc -O"$OO_SDK_OUT\include" "C:\Program Files (x86)\LibreOffice 4\URE\misc\types.rdb" "C:\Program Files (x86)\LibreOffice 4\program\types\oovbaapi.rdb" "C:\Program Files (x86)\Libreoffice 4\program\types\offapi.rdb"`

# Change directory to the boost libs directory (assuming you have already run bootstrap.bat, else run it now)

# Clone the library from github as document. `git clone https://github.com/anuragxel/boost-generic-document-library.git document`

# Change directory to the `build/` dicrectory.

# Run `../../../b2` to compile the library. You may need to run `bootstrap.bat` in the `boost/` directory first to generate `b2.exe`.

[endsect]

[endsect]

[endsect]

[section:introduction Tutorial]

The tutorial aims to present some basic ideas and usage of the library and would end with real life examples so that the use of the library is apparent. It is hopeful that the followed style is easy to follow. The term document refers to spreadsheet documents in general unless explicitly defined.

Firstly, to use the library in your C++ code, one would need to add the following header in your code.

```
#include <boost/document.hpp>
```

One can also include the different headers separately, in `<boost/document/*.hpp>`, the above header merely includes all the headers. All the types and classes fall in the namespace boost and using namespace aliases might be useful for clean coding.

Firstly, we would need to declare a variable for the document by specifying the file path, specifically as boost::filesystem::path type. So, we can write,
```
    boost::document d("/foo/bar/file.ods");
```
Or use a path variable to achieve the same thing,

```
    boost::filesystem::path p("/foo/bar/file.ods");
    boost::document d(p);
```

We would like to do something interesting with our document variable now. So, let's open it and export it as a CSV file.

[tip To Perform virtually nearly anything with the document, you would need to open it first and then close it. Closing however happens automatically when the variable goes out of scope, during the destruction sequence of the object and hence need not be explicitly carried out.]

[import ../examples/basic.cpp]
[basic_example]

Important thing to note here is the `enum` document_file_format which has three values, PDF, CSV and XML which it can accept. The exported file would reside in the same folder as the original file. Also, note the ommision of the `doc.close_document()` which would happen automatically.

We would also like to make some changes to our sheets in the document and get some information about them. There are various methods provided in the document class for the same. For example, the following examples prints out the names of all the sheets, after getting an instance by their indices. The sheet class is a wrapper over the actual sheet of the document and acts like a reference to the same.

[warning Sheets are zero indexed irrespective of implementation details. Same goes for cells, rows and columns.]

[import ../examples/sheet_names.cpp]
[sheet_names_example]

`sheet_count()` method provides the number of sheets present in the document.
Sheet instances can be obtained by their names or indices (using the `get_sheet` methods), and also through the `[]` operator, however the `[]` operator provides no exception handling unlike the `get_sheet` methods.

Moving on, we would like to save our files after we have edited them programmatically. The user can call the `save_document()` or the `save_as_document(const boost::filesystem::path&)` methods to save their document after they have been edited. The following example renames a sheet and then saves the document.

[import ../examples/save_doc.cpp]
[save_doc_example]

Point to note here is that, the program would crash if there is no sheet "Anurag" present. We can also use `doc.get_sheet("Anurag")` for an exception being raised.

There are other sheet methods which can be used, checking the reference would be a good idea.

Now, to use the cells there are multiple ways, all of which come with their own advantages and disadvantages. One could use the `get_cell(std::size_t row,std::size_t column)` method, or the `[]` operators. The following example would illustrate effectively. We would also understand the various intricacies of cell usage. The example is a mix of many styles and must not be used as a good coding example, it is only to illustrate the capabilities of the library.

[warning Cells are zero indexed irrespective of implementation details.]

[import ../examples/cell_basic.cpp]
[cell_basic_example]

The `get_cell()` method expects the row number and the column number of the cell, in zero indexed format. A lot of people are more accustomed with the alphanumeric index (Eg. "A2" or "F5") which have been provided too as `[]` operators.

Method like `empty()` returns a `bool` telling whether the cell is empty or not. `get_content_type()` returns an enum value which can be either EMPTY,STRING,VALUE,FORMULA or ERROR.

The user can use `set_formula()` or `set_string()` or `set_value()` methods, or can use the `=` operators which sets a value for doubles passed and sets a string for std::string passed. Likewise, `get_value()`, `get_formula()` and `get_string()` are also provided.

The explicit function calls instead of the `[]` operator provide the safety of exceptions. Having a look at the cell class reference document would help in aligning your coding style with the library usage.

[warning The cells are a reference to the actual cells in the spreadsheet. Assignment operator must be carefully used.]

Assignment of a cell with another cell holding some instance would result in copying of the contents of the cell to the former. This should be used very carefully.

Documents thus act like a 3D matrix, the first dimension being the sheet name/sheet index, the second and third being the column and row index of the cell respectively.

Now that we can access cells, it would be great if we could iterate over them too! The library provides access to two classes and associated `const` and non-`const` iterators, namely a `class row` and a `class column`. There are `get_column(std::size_t)` and `get_row(std::size_t)` methods in the `sheet` class and the `[]` operator returns a column instance. A small example for illustration is as follows,

[import ../examples/row_iter_usage.cpp]
[row_iter_usage_example]

[tip One should use the STL functionality over the iterators carefully as the copy constructors and the assignment operators do not behave as we expect at times.]

The iterators themselves are random-access iterators in nature. We can similarly work with columns also. The tutorial now ends having covered the basic ideas to be presented in the Library. If you have any suggestions to the interface or the tutorial, do not hesistate to contact the authors.

[endsect]

[section:introduction Brief Overview]

The library uses either Libre Office API or Microsoft Office API as the underlaying API to provide an easy interface to manipulate Spreadsheets. For example we can open a spreadsheet document and export it to PDF format like this.

```
    boost::document d("file_path");
    d.open_document();
    d.export_document(boost::document_file_format::PDF);
    d.close_document();
```

We can perform other simple operations to the document like this, See the Reference of document header file.

A document needs to be opened first to manipulate it. It may or may not be closed explicitly as the destruction automatically triggers a close if it is open. However, closing and reopening causes buggy behaviour right now and thus should be avoided. The interface is designed to accomodate all the differences between the API's and thus uniform behaviour can be expected irregardless of the base.

Simple Sheet Operations such as inserting sheets, deleting sheets, counting the number of sheets, getting sheets by indices are currently supported. A simple example can be seen as follows.

```
    boost::document d(file_path);
    d.open_document();

    boost::sheet s = d.get_sheet("Anurag");
    s.rename_sheet("Vatika");

    d.delete_sheet(0);

    for(int i = 0;i < d.sheet_count(); i++) {
        sheet sx = d.getSheet(i);
        sx.rename_sheet("AnuragSheet" + std::to_string(i));
    }
```

[warning Sheets are zero indexed irrespective of the underlaying API!]

There are various ways of getting a cell from a sheet or a document. The `[]` operator has been overloaded, also there are `get_cell()` functions which also provide exception handling.

```
    boost::document d(file_path);
    boost::sheet s = d["Anurag"];
    boost::cell c = s.get_cell(4,5); // row, column
    boost::cell c1 = s[4][5]; // 5,4 actually
    boost::cell c2 = s["C4"]; // 4,2
```
[warning Cells are zero indexed irrespective of the underlaying API!]

Certain cell operations are also supported currently, such as setting and getting strings, doubles and formulas. For Example,

```
    if(c1.get_content_type() == boost::cell_content_type::EMPTY) {
        return;
    }
    c1 = 14.66;
    c1 = "Anurag";
    c1.set_cell_formula("=C3+C4");
    c1.set_cell_value("Anurag");
    std::string s = c1.get_string();
```

Row and column classes are iteratable and can be used to manipulate the cells. The iterators themselves are random - access iterators and can be taken advantage of.

```
    boost::sheet s1 = c["Anurag"];
    boost::row r = s1.get_row(3);
    std::fill(r.begin(), r.begin() + 50, 1);
    double sum = 0;
    const boost::row_iterator end(r.begin() + 50);
    for (auto it = r.begin(); it != end; ++it) {
        sum += (*it).get_value();
    }
```
[endsect]
