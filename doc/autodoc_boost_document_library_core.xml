<?xml version="1.0" standalone="yes"?>
<library-reference id="document_library_reference"><title>Document Library Reference</title><header name="boost/document/document.hpp">
<namespace name="boost">
<class name="document"><purpose>This is the main class interface to be exposed to the library user. </purpose><method-group name="private member functions">
<method name="init"><type>std::shared_ptr&lt; document_interface &gt;</type></method>
</method-group>
<method-group name="public member functions">
<method name="create_document"><type>void</type><purpose>creates document using Calc/Excel given in the file path. </purpose></method>
<method name="open_document"><type>void</type><purpose>Opens document using Calc/Excel given in the file path. </purpose></method>
<method name="close_document"><type>void</type><purpose>Closes document using Calc/Excel given in the file path. </purpose></method>
<method name="save_document"><type>void</type><purpose>saves document using Calc/Excel given in the file path. </purpose></method>
<method name="save_as_document"><type>void</type><parameter name="path"><paramtype>const boost::filesystem::path &amp;</paramtype></parameter><purpose>saves document at the path using Calc/Excel provided in first argument. </purpose></method>
<method name="export_document"><type>void</type><parameter name="format"><paramtype>boost::document_file_format::type</paramtype><default>boost::document_file_format::PDF</default></parameter><purpose>Exports document using Calc/Excel given in the file path and the file format. Default format is PDF. </purpose></method>
<method name="insert_sheet"><type>boost::sheet</type><parameter name="str"><paramtype>const std::string &amp;</paramtype></parameter><purpose>Inserts a sheet in the document and returns the sheet instance. </purpose></method>
<method name="get_sheet"><type>boost::sheet</type><parameter name="str"><paramtype>const std::string &amp;</paramtype></parameter><purpose>Gets a sheet instance of name str which can be manipulated as needed. </purpose></method>
<method name="operator[]"><type>boost::sheet</type><parameter name="str"><paramtype>const std::string &amp;</paramtype></parameter></method>
<method name="get_sheet"><type>boost::sheet</type><parameter name="index"><paramtype>std::size_t</paramtype></parameter><purpose>Gets a sheet instance of that index which can be manipulated as needed. </purpose></method>
<method name="operator[]"><type>boost::sheet</type><parameter name="index"><paramtype>std::size_t</paramtype></parameter></method>
<method name="delete_sheet"><type>void</type><parameter name="str"><paramtype>const std::string &amp;</paramtype></parameter><purpose>Deletes the sheet of name str. </purpose></method>
<method name="delete_sheet"><type>void</type><parameter name="index"><paramtype>std::size_t</paramtype></parameter><purpose>Deletes the sheet of name str. </purpose></method>
<method name="sheet_count" cv="const"><type>std::size_t</type><purpose>Gives you the number of sheets. </purpose></method>
</method-group>
<constructor specifiers="explicit"><parameter name="path"><paramtype>const boost::filesystem::path &amp;</paramtype></parameter><purpose>The Constructor. Creates a new document object. </purpose></constructor>
<destructor><purpose>Destructor Closes Unsaved Documents. </purpose></destructor>
</class></namespace>
</header>
</library-reference>